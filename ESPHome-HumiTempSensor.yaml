substitutions:
  device_name: "HumiTempSensor"
  warn_threshold: "65.0"
  display_rotation: "0째"

esphome:
  name: humitempsensor
  friendly_name: ${device_name}

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "GENERATE_NEW_RANDOM_KEY"

ota:
  password: "GENERATE_NEW_RANDOM_PASSWORD"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Fallback"
    password: "GENERATE_NEW_RANDOM_PASSWORD"

captive_portal:

# everything below this could be outsourced with e.g.
# <<: !include humitemp/common.yaml

time:
  - platform: homeassistant

sun:
  latitude: 42.0째
  longitude: 69.0째

output:
  - platform: gpio
    pin: 4
    id: led4
  - platform: gpio
    pin: 5
    id: led5

i2c:
  sda: 2
  scl: 0
  scan: false

sensor:
  - platform: bme280
    id: bme
    temperature:
      name: "${device_name} Temperature"
      id: temp
    pressure:
      name: "${device_name} Pressure"
      id: pres
    humidity:
      name: "${device_name} Humidity"
      id: hum
      on_value:
        then:
        - component.update: ssd
      on_value_range: 
        - below: ${warn_threshold}
          then:
            - output.turn_off: led4
            - output.turn_off: led5
        - above: ${warn_threshold}
          then:
            - output.turn_on: led4
            - output.turn_on: led5
    address: 0x76
    update_interval: 10s
  - platform: sun
    id: sun_elev
    type: elevation
    
font:
  - file: "gfonts://Roboto"
    size: 10
    id: rob10
  - file: "gfonts://Roboto"
    size: 12
    id: rob12
  - file: "gfonts://Roboto"
    size: 24
    id: rob24

display:
  - platform: ssd1306_i2c
    model: SSD1306_128X32
    id: ssd
    update_interval: never
    rotation: ${display_rotation}
    lambda: |-
      it.print(4, 0, id(rob10), "째C temp");
      it.printf(4, 9, id(rob24), "%4.1f", id(temp).state);
      it.print(96, 0, id(rob10), "\% hum");
      it.printf(76, 9, id(rob24), "%5.1f", id(hum).state);
      // dim display at night
      ((esphome::ssd1306_base::SSD1306 &) it).set_contrast(id(sun_elev).state / 100.0);
      if (id(hum).state >= ${warn_threshold}) {
        it.print(48, 0, id(rob12), "!WARN!");
        //((esphome::ssd1306_base::SSD1306 &) it).set_invert(true); //waiting for https://github.com/esphome/feature-requests/issues/2341 to be resolved
      } else {
        //((esphome::ssd1306_base::SSD1306 &) it).set_invert(false); //waiting for https://github.com/esphome/feature-requests/issues/2341 to be resolved
      }
